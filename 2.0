from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackContext
import os

# Статусы оплаты
user_keys_status = {}
user_payment_status = {}  # новый словарь

# Проверка доступа
def is_user_allowed(user_id: int, username: str) -> bool:
    with open("allowed_users.txt", "r") as file:
        allowed_users = [line.strip() for line in file.readlines()]
    return str(user_id) in allowed_users or (username and username in allowed_users)

# Команда /start
async def start(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    username = update.message.from_user.username
    if not is_user_allowed(user_id, username):
        await update.message.reply_text('У вас нет доступа к этому боту.')
        return
    await update.message.reply_text('Привет! Используйте /buy, чтобы оплатить и получить ключ.')

# Команда /buy — выводит кнопку оплаты
async def buy(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    username = update.message.from_user.username

    if not is_user_allowed(user_id, username):
        await update.message.reply_text('У вас нет доступа к этой команде.')
        return

    # Замените адрес на свой
    wallet_url = "https://t.me/wallet?startapp=send_ton?recipient=ВАШ_АДРЕС&amount=2&token=usdt"
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("Оплатить 2 USDT через Telegram Wallet", url=wallet_url)]
    ])
    await update.message.reply_text("Чтобы получить ключ, оплатите 2 USDT по кнопке ниже:", reply_markup=keyboard)
    await update.message.reply_text("После оплаты отправьте сюда хеш транзакции или напишите /confirm, если уже оплатили.")

# Команда /confirm — ручное подтверждение (временно)
async def confirm_payment(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    username = update.message.from_user.username

    # Тут можно подключить автоматическую проверку транзакции по API (если нужно)
    user_payment_status[user_id] = True
    await update.message.reply_text("Оплата подтверждена ✅. Теперь используйте /key для получения ключа.")

# Команда /key — выдаёт ключ только после оплаты
async def get_key(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    username = update.message.from_user.username

    if not is_user_allowed(user_id, username):
        await update.message.reply_text('У вас нет доступа к этой команде.')
        return

    if not user_payment_status.get(user_id, False):
        await update.message.reply_text("Сначала оплатите через /buy, затем подтвердите /confirm.")
        return

    if user_keys_status.get(user_id, False):
        await update.message.reply_text('Вы уже получили ключ.')
        return

    file_path = 'C:/Users/User/.vscode/cli/keys.txt'
    try:
        with open(file_path, 'r') as file:
            keys = file.readlines()

        if not keys:
            await update.message.reply_text('Ключи закончились.')
            return

        key = keys[0].strip()
        with open(file_path, 'w') as file:
            file.writelines(keys[1:])

        await update.message.reply_text(f'Ваш ключ: {key}')
        user_keys_status[user_id] = True

    except FileNotFoundError:
        await update.message.reply_text('Файл keys.txt не найден.')

# Эхо-сообщения
async def echo(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(update.message.text)

# Запуск бота
def main():
    application = ApplicationBuilder().token('YOUR_BOT_TOKEN').build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('buy', buy))
    application.add_handler(CommandHandler('confirm', confirm_payment))
    application.add_handler(CommandHandler('key', get_key))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    application.run_polling()

if __name__ == '__main__':
    main()
