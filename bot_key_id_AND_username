from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackContext
import os

# Словарь для хранения статусов получения ключей пользователями
user_keys_status = {}

# Список разрешённых пользователей (можно использовать ID и username)
def is_user_allowed(user_id: int, username: str) -> bool:
    with open("allowed_users.txt", "r") as file:
        allowed_users = [line.strip() for line in file.readlines()]
    
    # Проверка по ID
    if str(user_id) in allowed_users:
        return True
    # Если ID не найден, проверяем по username
    if username and username in allowed_users:
        return True
    return False

async def start(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    username = update.message.from_user.username
    if not is_user_allowed(user_id, username):
        await update.message.reply_text('У вас нет доступа к этому боту.')
        return
    await update.message.reply_text('Привет! Используйте /key, чтобы получить ключ.')

async def get_key(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    username = update.message.from_user.username
    
    # Проверяем, разрешен ли доступ пользователю
    if not is_user_allowed(user_id, username):
        await update.message.reply_text('У вас нет доступа к этой команде.')
        return
    
    # Проверяем, получил ли пользователь ключ
    if user_keys_status.get(user_id, False):
        await update.message.reply_text('Вы уже получили ключ.')
        return
    
    file_path = 'C:/Users/User/.vscode/cli/keys.txt'
    
    try:
        with open(file_path, 'r') as file:
            keys = file.readlines()
        
        if not keys:
            await update.message.reply_text('Ключи закончились.')
            return
        
        # Берем первый ключ и удаляем его из списка
        key = keys[0].strip()
        
        # Записываем оставшиеся ключи обратно в файл
        with open(file_path, 'w') as file:
            file.writelines(keys[1:])
        
        await update.message.reply_text(f'Ваш ключ: {key}')
        
        # Устанавливаем статус пользователя на "получил ключ"
        user_keys_status[user_id] = True
        
    except FileNotFoundError:
        await update.message.reply_text('Файл keys.txt не найден.')

async def echo(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(update.message.text)

def main():
    application = ApplicationBuilder().token('YOUR_BOT_TOKEN').build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('key', get_key))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    application.run_polling()

if __name__ == '__main__':
    main()
